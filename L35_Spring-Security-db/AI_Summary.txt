Quick recap
The instructor provided a comprehensive overview of Spring Security implementation, focusing on database authentication and user management features including user detail service configuration and authentication mechanisms. The team explored various aspects of user authentication systems, including the handling of user credentials, authority management, and the importance of unique usernames in the database. The discussion concluded with practical demonstrations of API security concepts, including authentication methods, CSRF protection, and the implementation of user signup functionality for different user types in an Uber-like application.
Next steps
- Developer: Implement user authentication using UserDetailsService instead of in-memory authentication
- Developer: Create DemoUserService class implementing UserDetailsService interface
- Developer: Create DemoUser class implementing UserDetailsService interface and storing user details in database
- Developer: Implement load user by username function in Demo UserService class
- Developer: Store user details in database, including username, password, email, and authorities as delimiter-separated string
- Developer: Convert stored authorities string into list of GrantedAuthority objects for Spring Security
- Developer: Implement getAuthorities, getPassword, getUsername, and other required functions in DemoUser class
- Developer: Configure Spring Security with UserDetailsService authentication and define necessary security configurations
- Developer: Create new database and set up data source URL, username, and password in application.properties file
- Developer: Add getters and setters for username, password, and authorities fields in DemoUser class
- Developer: Add @Column annotation to username field in DemoUser class
- Developer: Implement findUserByUsername method in DemoUserRepository
- Developer: Override configure method and httpSecurity method in SecurityConfig class
- Team: Ensure username is defined as a unique column in the database to prevent duplicate user entries
- Team: Implement setAuthorities method in DemoUser class for user signup functionality
- Team: Add @Id and @GeneratedValue annotations to define primary key in DemoUser entity class
- Team: Modify DemoUserRepository's findByUsername method to return List instead of single DemoUser
- Team: Implement unique constraint on username field in database schema
- Team: Implement password expiration functionality using scheduler/cron jobs for companies requiring password changes
- Team: Implement account lockout functionality after incorrect login attempts
- Team: Add KYC-related checks for account activation/deactivation scenarios
- Team: Create sign-up API to handle user registration and database population
- Team: Implement password encoder as a bean instead of overriding function
- Team: Add validation for incorrect login attempts and account locking feature
- Team: Add scheduler/notifier for password expiration reminders
- Team: Implement forgot password functionality
- Team: Add user authorities management
- Team: Implement sign-up API that creates new users with username and password
- Team: Add HTTP Basic authentication support to enable API testing in Postman
- Team: Modify security configuration to return JSON response instead of HTML for unauthorized requests
- Team: Implement authentication flow that accepts username and password in headers
- Team: Add cookie-based authentication support for maintaining user session
- Team: Implement authorization checks based on user authorities
- Frontend team: Implement authentication using basic auth in Postman requests
- Frontend team: Send application name or origin as request header/parameter for user type identification
- Backend team: Create separate APIs for different user types instead of using a single generic API
- Backend team: Implement password encoding in demo user service
- Backend team: Resolve circular dependency between password encoder and demo user service by refactoring code structure
- Frontend team: Ensure authentication details are provided in the header when accessing APIs using Postman
- Frontend team: Support HTTP basic authentication for the API endpoints
- Backend team: Handle CSRF tokens elegantly for unauthenticated POST calls
- Backend team: Ensure CSRF tokens are not disabled in the production environment
- Backend team: Configure CSRF token validation mechanism for unauthenticated APIs
- Frontend team: Implement CSRF token handling for unsafe APIs by sending XSRF token in request headers
- Frontend team: Store and send CSRF token in all API requests to backend
- Backend team: Generate and send CSRF token in response headers/cookies for unauthenticated requests
- Backend team: Implement CSRF token validation for all unsafe APIs
- Backend team: Add comment on line 27 of security config to indicate CSRF bypass is for testing purposes only
- Backend team: Remove CSRF token disable setting in production environment
- Backend team: Implement proper CSRF token validation using CsrfTokenRepository in future implementation
- Team: Push current code to Git
- Class: Cover minor project 2 in tomorrow's class
- Class: Demonstrate token-based authentication approach
- Class: Cover remaining topics in next 2-3 classes
- Class: Show how to handle CSRF token elegantly in a future class
Summary
Spring Security Database Configuration Demo
The instructor demonstrated how to configure Spring Security with a database instead of in-memory storage, using a new project setup with MySQL. They explained the advantages of database authentication over in-memory storage, including persistence of user credentials and the ability to handle larger user bases. The instructor showed how to configure user detail service authentication and discussed the difference between this approach and JDBC authentication, noting that user detail service provides more flexibility for various storage types. They also briefly touched on session management and token-based authentication, mentioning that these topics would be covered in future sessions.
Spring Security Authentication Implementation
The instructor explained how to implement a user authentication system using Spring Security. They demonstrated creating a DemoUserService that implements the UserDetailsService interface, and a DemoUser class that implements the UserDetails interface. The instructor discussed what fields to store in the database for authentication, including username, password, email, and authorities. They showed how to convert a string of authorities separated by a delimiter into a list of GrantedAuthority objects that Spring Security can understand. The instructor also explained the difference between UserDetailsService and UserDetails, and demonstrated two ways to implement the authority conversion: using a traditional for-loop or a more concise stream-based approach.
Spring Security Account Status Functions
The instructor explained the purpose of four functions in Spring Security: isAccountNonExpired, isAccountNonLocked, isCredentialsNonExpired, and isEnabled. These functions check the status of user accounts, such as password expiration and account activation/deactivation. The instructor provided examples of how these features are used in real-world applications, including password expiration policies and account locking after multiple failed login attempts. They also discussed why user accounts are not deleted, even when deactivated, explaining that data is typically stored in an archival system for future reference and potential reactivation.
Unique Usernames for Database Integrity
The team discussed the importance of ensuring that usernames are unique in a database to prevent potential security issues and data retrieval problems. They explored the implications of using usernames as primary keys and concluded that while it is not a security concern if someone gains database access, it is generally not a best practice due to indexing performance and foreign key relationships. The team agreed that usernames should be defined as unique columns, even if they are not primary keys, to avoid duplicate entries and ensure correct user authentication.
Demo User Service Implementation
The team discussed the implementation of a demo user service and authentication system. They reviewed how to fetch user details, bind services, and configure password encoding. The instructor demonstrated creating user entries in a database using a command line runner, showing how tables are automatically generated from entity annotations. They confirmed that the login functionality works as expected, with appropriate authority levels for different users. The next step will be to create a sign-up API to handle user registration instead of manual database insertion.
Spring Application Debugging and Testing
The instructor explained how Spring application flow works, particularly focusing on the command line runner and how it interacts with endpoints. They demonstrated debugging the application to show the sequence of function calls and discussed how API calls can be made after the runner executes. The instructor then showed how to test the application using Postman, explaining why the response was 200 instead of 401 unauthorized, and demonstrated how to enable JSON responses instead of HTML by modifying the security configuration to include HTTP basic authentication.
API Authentication and Authorization Concepts
The instructor explained the concepts of authentication and authorization in API security, using HTTP status codes 401 (unauthenticated) and 403 (forbidden) to illustrate these concepts. They demonstrated how to authenticate an API using basic authentication with username and password, and showed that cookies can also be used for authentication, with Spring Security prioritizing username/password authentication over cookies. The instructor emphasized that when testing APIs in Postman, proper authentication headers must be included in the request, and the server must support HTTP basic authentication to avoid receiving a login page.
User Signup API Design Scenarios
The discussion focused on the design of user signup APIs and how to handle different user types (e.g., drivers and riders) in Uber-like applications. Class explained two scenarios: in the first, a single generic API is used with additional parameters or headers to indicate user type, while in the second, separate APIs are created for different user types. Sharad raised questions about how the backend would identify user types, and Class clarified that this could be done through request parameters or headers. The third scenario, where users select their own authority level, was deemed undesirable as it would allow users to specify inappropriate permissions. Class also noted that while the frontend UI could be similar for different user types, the backend should not rely on user input to determine authority levels.
Breaking Circular Dependencies in Demo Service
The instructor demonstrated how to create a demo user service and identified a circular dependency issue between the password encoder and demo user service in the security configuration. They explained that this circular dependency caused a bean creation error and showed how to resolve it by moving the password encoder to a separate DemoConfig class, breaking the circular dependency. The instructor also mentioned that while cyclic dependency detection is available in the Ultimate edition of Delasia, it is not present in the Community edition.
API Authentication and CSRF Protection
The instructor demonstrated creating a user through Postman and explained API authorization requirements. They showed how to create a user with the endpoint /user/student/signup and discussed that APIs starting with /student require student authentication, while those starting with /librarian require librarian authentication. The instructor also explained the concept of CSRF (Cross-Site Request Forgery) tokens and provided an example of how attackers can use them to impersonate legitimate users.
CSRF Token Protection Overview
The instructor explained how CSRF tokens work to prevent cross-site request forgery attacks, particularly for unsafe HTTP methods like POST, PUT, and DELETE. They demonstrated that when CSRF protection is disabled, unauthenticated requests can succeed, but this should never be done in production environments. The instructor showed how to enable CSRF tokens by using a CSRF token repository, which generates and validates tokens between the server and client. They also explained that while CSRF tokens are typically sent as cookies, they can also be included in request headers, and discussed the importance of proper CSRF protection in web applications.
